name: CDK Template.
on:
  push:
    branches:
      - master
    paths:
      - ../../examples/example-save-user
  pull_request_review:
    types:
      - submitted

env:
  EXAMPLE_ECR: example-ecr-stack
  EXAMPLE_LAMBDA: example-lambda-stack

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      id: aws-credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create ECRs with CDK
      run: |
        cd infra
        npm install
        npm ci
        npm install -g aws-cdk
        cdk synth
        cdk bootstrap
        cdk deploy $EXAMPLE_ECR --require-approval never

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        cd lambda/example-save-user
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
        docker build -t $EXAMPLE_ECR .
        docker tag $EXAMPLE_ECR:latest $ECR_REGISTRY/$EXAMPLE_ECR:latest
        docker push $ECR_REGISTRY/$EXAMPLE_ECR:latest
    
    - name: Create Lambda Funtion with CDK
      run: |
        cd infra
        cdk deploy $EXAMPLE_LAMBDA --require-approval never